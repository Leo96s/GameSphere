name: Automated Versioning with Tags Based on Commit Messages

on:
  push:
    branches:
      - main  # Trigger on pushes to the main branch

jobs:
  versioning:
    permissions:
      contents: write
      issues: write
      pull-requests: write
  
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the repository
      - name: Check out the code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Ensure full history is fetched

      # Step 2: Fetch all tags
      - name: Fetch tags
        run: git fetch --tags

      # Step 3: Get the latest tag or default to v0.0.0
      - name: Get latest tag
        id: tag
        run: |
          TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "Latest tag: $TAG"
          echo "latest_tag=$TAG" >> $GITHUB_ENV

      # Step 4: Determine version bump based on commit messages
      - name: Analyze commits for version bump
        id: bump
        run: |
          TAG=${{ env.latest_tag }}
          VERSION=${TAG#v}  # Remove 'v' prefix
          IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"

          COMMITS=$(git log --pretty=%B ${TAG}..HEAD)

          BUMP="patch"
          if echo "$COMMITS" | grep -q "BREAKING CHANGE"; then
            BUMP="major"
          elif echo "$COMMITS" | grep -q "^feat:"; then
            BUMP="minor"
          elif echo "$COMMITS" | grep -q "^fix:"; then
            BUMP="patch"
          fi

          if [ "$BUMP" = "major" ]; then
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
          elif [ "$BUMP" = "minor" ]; then
            MINOR=$((MINOR + 1))
            PATCH=0
          elif [ "$BUMP" = "patch" ]; then
            PATCH=$((PATCH + 1))
          fi

          NEW_VERSION="v$MAJOR.$MINOR.$PATCH"
          echo "New version: $NEW_VERSION"
          echo "new_version=$NEW_VERSION" >> $GITHUB_ENV

      # Step 5: Create and push the new tag
      - name: Create and push new tag
        run: |
          git tag ${{ env.new_version }}
          git push origin ${{ env.new_version }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Step 6: Commit and push the updated CHANGELOG.md file
      - name: Configure Git identity
        run: |
          git config --local user.email "actions@github.com"
          git config --local user.name "GitHub Actions"
          
       # Step 7: Update RELEASE_NOTES.md
      - name: Update RELEASE_NOTES.md and CHANGELOG.md
        run: |
         # Check if RELEASE_NOTES.md exists; create it if missing
            if [ ! -f RELEASE_NOTES.md ]; then
              echo "Creating missing RELEASE_NOTES.md"
              touch RELEASE_NOTES.md
            fi
        
            # Check if CHANGELOG.md exists; create it if missing
            if [ ! -f CHANGELOG.md ]; then
              echo "Creating missing CHANGELOG.md"
              touch CHANGELOG.md
            fi
        
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "v0.0.0")
          COMMITS=$(git log --pretty=format:"* %s" ${PREVIOUS_TAG}..HEAD)
      
          if [ -z "$COMMITS" ]; then
            echo "No new commits found. Skipping release notes update."
            echo "No new commits found. Skipping changelog update."
            exit 0
          fi
      
          # Prepend the new version and commits to the release notes
          echo "## ${{ env.new_version }} - $(date +'%Y-%m-%d')" > temp_RELEASE_NOTES.md
          echo "$COMMITS" >> temp_RELEASE_NOTES.md

           # Prepend the new version and commits to the changelog
          echo "## ${{ env.new_version }} - $(date +'%Y-%m-%d')" > temp_CHANGELOG.md
          echo "$COMMITS" >> temp_CHANGELOG.md
      
          # Append the existing content of RELEASE_NOTES.md to the new file
          cat RELEASE_NOTES.md >> temp_RELEASE_NOTES.md

          # Append the existing content of CHANGELOG.md to the new file
          cat CHANGELOG.md >> temp_CHANGELOG.md
      
          # Replace the old RELEASE_NOTES.md with the new one
          mv temp_RELEASE_NOTES.md RELEASE_NOTES.md

          # Replace the old CHANGELOG.md with the new one
          mv temp_CHANGELOG.md CHANGELOG.md
      
          git add RELEASE_NOTES.md
          git add CHANGELOG.md
          
          if git diff --cached --quiet; then
            echo "No changes to commit in RELEASE_NOTES.md."
            echo "No changes to commit in CHANGELOG.md."
            exit 0
          fi
      
          git commit -m "chore: update release notes and changelog for ${{ env.new_version }}"
          git push origin main
